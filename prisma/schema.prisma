generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  @@unique([provider, providerAccountId], map: "Account_provider_providerAccountId_key")
}

model comment {
  id        String   @id
  text      String
  createdAt DateTime @default(now())
  authorId  String
  postId    String
  replyToId String?
  commentId String?
}

model commentvote {
  userId    String
  commentId String
  type      commentvote_type

  @@id([userId, commentId])
}

model post {
  id           String   @id
  title        String
  content      Json?
  createdAt    DateTime @default(now())
  updatedAt    DateTime
  authorId     String
  subgreaditId String
}

model session {
  id           String   @id
  sessionToken String   @unique(map: "Session_sessionToken_key")
  userId       String
  expires      DateTime
}

model subgreadit {
  id        String   @id
  name      String   @unique(map: "Subgreadit_name_key")
  createdAt DateTime @default(now())
  updatedAt DateTime
  creatorId String?

  @@index([name], map: "Subgreadit_name_idx")
}

model subscription {
  userId       String
  subgreaditId String

  @@id([userId, subgreaditId])
}

model user {
  id            String    @id
  name          String?
  email         String?   @unique(map: "User_email_key")
  emailVerified DateTime?
  username      String?   @unique(map: "User_username_key")
  image         String?
}

model vote {
  userId String
  postId String
  type   vote_type

  @@id([userId, postId])
}

enum vote_type {
  UP
  DOWN
}

enum commentvote_type {
  UP
  DOWN
}
